which(agricultureLogical)
agricultureLogical<- select(mydata, ACR=3 & AGS =6)
agricultureLogical<- select(mydata, ACR=3 & AGS=6)
agricultureLogical<- select(mydata, ACR=3 && AGS=6)
agricultureLogical<- select(mydata, ACR=3, AGS=6)
which(agricultureLogical)
which(agricultureLogical)[1:3]
dt<- data.table(read.csv(ACC.csv))
dt<- data.table(read.csv("ACC.csv"))
agricultureLogical<- select(dt, ACR=3, AGS=6)
which(agricultureLogical)
which(agricultureLogical)[1:3]
agricultureLogical<- select(dt, ACR==3, AGS==6)
dt
agricultureLogical<- select(dt, ACR == 3, AGS == 6 )
agricultureLogical<- dt$ACR == 3 & dt$AGS == 6
which(agricultureLogical)[1:3]
which(agricultureLogical)
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
destfile <- "~/getdatajeff.jpg"
download.file(fileurl, destfile)
quantile(getdatajeff.jpg)
img<- readJPEG(getdatajeff.jpg, native= TRUE)
library(readjpeg)
install.packages(ReadJPEG)
install.packages("jpeg"
)
library(jpeg)
img<- readJPEG(getdatajeff.jpg, native= TRUE)
img<- readJPEG("getdatajeff.jpg", native= TRUE)
quantile(img, probs = c(.3, .8))
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
destfile <- "~/FGDP.csv"
download.file(fileurl, destfile)
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
destfile <- "~/Country.csv"
download.file(fileurl, destfile)
FGDP <- data.table(read.csv("FGDP.csv"))
Country <- data.table(read.csv("Country.csv"))
names(FGDP)
names(Country)
head(Country)
head(FGDP)
mergedData <- merge(FGDP,Country,by.x="X",by.y = "CountryCode,all=TRUE")
mergedData <- merge(FGDP,Country,by.x="X",by.y = "CountryCode",all=TRUE")
)
)
mergedData
mergedData <- merge(FGDP,Country,by.x="X",by.y="CountryCode",all=TRUE")
mergedData = merge(FGDP,Country,by.x="X",by.y="CountryCode",all=TRUE")
))
date()
swilr()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
now()
this_moment<-now()
this_moment
hour(now)
hour()
hour(this_moment)
ymd("1989-05-17")
my_date <-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
as.Date(25081985)
as.Date(origin,25081985)
p
dmy(25081985)
ymd("192012")
ymd("\\192012")
ymd("//192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
nyc <- now(,tz="America/New_York")
nyc <- now(tz="America/New_York")
nyc
nyc + days(2)
depart<- nyc + days(2)
depart
p
depart <- update(depart)
depart <- update(depart, hours = 17, minutes =34)
depart
depart <- update(depart, hours = 15, minutes =50)
arrive <- update(depart, hours = 15, minutes =50)
arrive <- depart+ hours(15) + minutes(50)
depart<- nyc + days(2)
arrive <- depart+ hours(15) + minutes(50)
depart<- nyc + days(2)
depart <- update(depart, hours = 17, minutes =34)
arrive <- depart+ hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
nyc
depart<- nyc + days(2)
depart
depart <- "2018-01-12 17:34:22 EST""
)
)
reset()
swirl()
arrive <- depart + hours(15) + minutes(50)
)with_tz
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz = "Singapore")
last_time
?interval
how_long <- new_interval(last_time, arrive)
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
dest <- "~/Data.csv"
download.file(url, dest)
data <- read.csv(dest, header = TRUE)
data
library(dplyr)
data_splitted <- strsplit(data, "wgtp")
names(data)
data_splitted <- strsplit(names(data), "wgtp")
data_splitted
data_splitted[123]
data <- read.csv(dest, header = TRUE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
dest <- "~/Data.csv"
download.file(url, dest)
data <- read.csv(dest, header = TRUE)
head(data)
namesdata
names(data)
data
select(data, x.3)
select(data, "x.3")
select(data, "X.3")
select(data,"X.3")
select(data,"X.3") %>%
sub(",""",,)
select(data,"X.3") %>%
sub(",","",,)
select(data,"X.3") %>%
sub(",","",,)
select(data,"X.3") %>%
sub(",","","X.3",)
select(data,"X.3") %>%
gsub(",","","X.3")
class(data$X.3)
df <- as.numeric(gsub(",","",data$X.3))
df
mean(df)
avg(df)
mean(df, na.rm = TRUE)
GDPrank <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=5
, nrows=190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Country", "GDP")
)
GDPrank
GDPrank[, mean(as.integer(gsub(pattern = ',', replacement = '', x = GDP )))]
grep("^United",countryNames)
grep("^United",GDPrank$countryNames)
grep("^United",GDPrank$countryNames),3
GDPrank$Country
GDPrank
mutate(countryNames = GDPrank$Country )
mutate(GDPran, countryNames = GDPrank$Country )
mutate(GDPrank, countryNames = GDPrank$Country )
GDPrank
-GDPrankCountry <- mutate(GDPrank, countryNames = GDPrank$Country )
GDPrankCountry <- mutate(GDPrank, countryNames = GDPrank$Country )
GDPrankCountry
select(GDPrankCountry, countryNames)
select(GDPrankCountry, countryNames) %>% grep("^United",countryNames)
countryNames <- filter(GDPrankCountry, countryNames)
countryNames <- select(GDPrankCountry, countryNames)
countryNames
grep("^United",countryNames)
grep("^United",GDPrankCountry[, "Country"])
sum(grep("^United",GDPrankCountry[, "Country"]))
count(grep("^United",GDPrankCountry[, "Country"]))
grep("^United",countryNames[, "countryNames"])
grep("^United",countryNames$countryNames"])
)
grep("^United",countryNames$countryNames)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
dest <- "~/Data.csv"
download.file(url, dest)
data <- read.csv(dest, header = TRUE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
dest <- "~/Data_1.csv"
download.file(url, dest)
data_1 <- read.csv(dest, header = TRUE)
head(data)
head(data_1)
names(data)
head(data)
names(data_1)
head(data_1)
data_1$Latest.household.survey
View(data_1)
data_1$Special.Notes
head(data)
?merge
merged_data <- merge(data, data_1, by.x = "X",by.y ="CountryCode")
head(merged_data)
merged_data_1 <- select(merged_data, Special.Notes, na.rm= TRUE)
merged_data_1 <- select(merged_data, Special.Notes)
merged_data_1
grep("June",merged_data_1)
grep("June",merged_data_1[,"Special.Notes"])
count(grep("June",merged_data_1[,"Special.Notes"]))
grepl("June",merged_data_1[,"Special.Notes"])
count(grepl("June",merged_data_1[,"Special.Notes"]))
grepl("June",merged_data_1[,"Special.Notes"])
z <-grepl("June",merged_data_1[,"Special.Notes"])
length (z[z==TRUE])
grep("Fiscal year end: June 30",merged_data_1)
View(merged_data_1)
grep("Fiscal year end: June 30",merged_data_1$Special.Notes)
as.numeric(grep("Fiscal year end: June 30",merged_data_1$Special.Notes))
count(as.numeric(grep("Fiscal year end: June 30",merged_data_1$Special.Notes)))
count(as.numeric(grep("Fiscal year end: June 30",merged_data_1$Special.Notes))
)
grep-("Fiscal year end: June 30",merged_data_1)
z <-grepl("Fiscal year end: June 30",merged_data_1)
table(z)["TRUE"]
z
z <-grepl("Fiscal year end: June 30",merged_data_1$Special.Notes)
z
table(z)["TRUE"]
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages(quanmod)
install.packages(quantmod)
install.packages("quantmod"
)
library(quantmod)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampletimes
sampletimesamzn
amzn
head(amzn)
names(amzn)
amzn[1]
amzn[,1]
amzn[,2]
amzn[,3]
amzn[1,]
amzn[1,1]
amzn[,1]
table(amzn)
amzn
names(amzn)
head(amzn)
names(sampleTimes)
head(sampleTimes)
sampleTimes
z <- count(^2012)
pwd
ls()
getwd()
View("~/Data_Science/Getting and Cleaning Data/UCI HAR Dataset/train/X_train.txt")
zipF<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
outDir<-"./"
unzip(zipF,exdir=outDir)
zipF<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
outDir<-"./"
unzip(zipF, outDir)
install.packages("swirl")
swirl
library(swirl)
swirl()
swirl(Exploratory_Data_Analysis)
swirl("Exploratory_Data_Analysis")
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
pollution$pm25
summary(pollution$pm25)
ppm <-summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h= 12)
hist(ppm)
hist(ppm, col = "green")
rug(ppm)
rug(ppm)
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v=2, lwd = 2)
abline(v=12, lwd = 2)
abline(v= median(ppm), col= "magenta",lwd = 4)
names(pollution)
reg <-table(pollution$region)
reg
barplot(reg, col = "wheat" , main= "Number of counties in Each Region")
barplot(reg, col = "wheat" , main = "Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col("red")
boxplot(pm25~region, data = pollution, col ="red")
pm25
pollution$pm25
par(mfrow = c(2,1), mar = c(4, 4, 2, 1))
easet <- subset(pollution, pollution$region == "east")
easet <- subset(pollution, region == "east")
east <- subset(pollution,region == "east")
east <- subset(pollution, pollution$region == "east")
east_1 <- subset(pollution, pollution$region == "east")
head(east)
length(east)
dim(east)
hist(east$pm25, col = "green")
hist(subset(pollution, pollution$region == "west"), pm25, col="green")
hist(subset(pollution, pollution$region == "west"), pm25~region, col="green")
subset(pollution, pollution$region == "west") %>% hist($pm25, col="green")
subset(pollution, pollution$region == "west") %>% hist(~pm25, col="green")
west <- subset(pollution, pollution$region == "west") %>% hist(west$pm25, col="green")
west <- subset(pollution, pollution$region == "west"); hist(west$pm25, col="green")
hist(subset(pollution, pollution$region == "west")$pm25, col="green")
hist(subset(pollution, region == "west")$pm25, col="green")
pollution$latitude, pollution$pm25
plot(pollution, pollution$latitude, pollution$pm25)
plot(pollution$, latitude, pm25)
plot(latitude, pm25, data = pollution$)
plot
with(pollution, plot(latitude, pm25))
abline(12, lwd = 2, lty = 2)
abline(h=12, lwd = 2, lty = 2)
col= pollution$region
plot(pollution$latitude, ppm, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
plot(pollution$latitude, pollution$ppm, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
info()
skip()
skip()
swirl()
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd = 2, lty = 2)
par(mfrow = c(1,2), mar = c(5,4,2,1))
west <- subset(pollution,region == "wast")
west <- subset(pollution,region == "west")
plot(west$latitude, west$pm25, main = "West")
east <- subset(pollution,region == "east")
plot(East$latitude, East$pm25, main = "East")
plot(east$latitude, east$pm25, main = "East")
?Devices
plot(eruptions, waiting)
plot(eruptions, waiting)
plot
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main= ""Old Faithful Geyser data")
title(main= "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp~Income|Region, data= state, layout(c(4,1)))
xyplot(Life.Exp~Income|Region, data= state, layout=c(4,1))
xyplot(Life.Exp~Income | region, data= state, layout=c(4,1))
xyplot(Life.Exp~Income | region, data= state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data =mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
dim(airquality)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone, Month, data= airquality)
boxplot(airquality$Ozone, airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab ="Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab ="Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red", main = "Ozone and Wind in New York City")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
main = "Ozone and Wind in New York City"
with(airquality, plot(Wind, Ozone), main = "Ozone and Wind in New York City")
title(main = "Ozone and Wind in New York City")
length par()
length(par())
par()
names(par())
par()$spin
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
mzy <- subset(airquality$Month, 5)
may <- subset(airquality$Month, "5")
may
may =
may <- subset(airquality, Month = "5")
may <- subset(airquality, Month == 5)
with(may, plot(Wind, Ozone, color = " blue", points(3))
)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month == !5)
notmay <- subset(airquality, Month !== 5)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind,notmay$Ozone,col="red",pch=17)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright", pch = c(17,8), col = c("blue","red"), legend = c("May", "Other Months")
)
abline(h, lty=2, lwd=2)
abline(h, lty=2, lwd=2)
abline(v, median(airquality$Wind) lty=2, lwd=2)
abline(v, median(airquality$Wind), lty=2, lwd=2)
abline(v=, median(airquality$Wind), lty=2, lwd=2)
abline(v= median(airquality$Wind), lty=2, lwd=2)
par(mfrow c(2,2))
par(mfrow c(2,2))
par(mfrow c(1,2))
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar, main = "Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = C(4,4,2,1), oma=  c(0,0,2,0))
par(mfrow = c(1,3), mar = c(4,4,2,1), oma=  c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and weather in New York City", outer = TRUE)
mtext("Ozone and Weather in New York City", outer = TRUE)
# create anew colum with date and time
df$Datetime <-paste(df$Date, df$Time)
setwd(dir = "Data_Science/Exploratory Data Analysis/")
#import the txt file in "Data" dataset
Data <- read.table("household_power_consumption.txt", sep = ";", na.strings = "?", stringsAsFactors = FALSE)
#Rename the names of Data dataset and remove the first row
colnames(Data) <- c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
Data <- Data[-1,]
df <- subset(Data, Data$Date=="1/2/2007"|Data$Date=="2/2/2007")
#change Factor data type to Date in "Date" column and
# install.packages("dplyr") (if any)
# library(dplyr) (if any)
df <- mutate(df, Date=as.Date(Date, format = "%d/%m/%Y"))
#changing chr vectors to numeric
df$Global_active_power <- as.numeric(df$Global_active_power)
df$Global_reactive_power <- as.numeric(df$Global_reactive_power)
df$Voltage <- as.numeric(df$Voltage)
df$Global_intensity <- as.numeric(df$Global_intensity)
df$Sub_metering_1 <- as.numeric(df$Sub_metering_1)
df$Sub_metering_2 <- as.numeric(df$Sub_metering_2)
df$Sub_metering_3 <- as.numeric(df$Sub_metering_3)
# create anew colum with date and time
df$Datetime <-paste(df$Date, df$Time)
par(mfcol = c(2,2))
plot(strptime(df$Datetime, "%d/%m/%Y %H:%M:%S"), df$Global_active_power, type="l", xlab="Global active Power (Kilowatts)", col = "black")
plot(strptime(df$Datetime, "%d/%m/%Y %H:%M:%S"), df$Sub_metering_1, type="l", xlab="",ylab="Energy sub metering", col = "black")
lines(strptime(df$Datetime, "%d/%m/%Y %H:%M:%S"), df$Sub_metering_2, type="l", xlab="",ylab="Energy sub metering", col = "red")
lines(strptime(df$Datetime, "%d/%m/%Y %H:%M:%S"), df$Sub_metering_3, type="l", xlab="",ylab="Energy sub metering", col = "blue")
legend("topright",lty=1, col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(strptime(df$Datetime, "%d/%m/%Y %H:%M:%S"), df$Voltage, type="l", ylab="Voltage", col = "black")
plot(strptime(df$Datetime, "%d/%m/%Y %H:%M:%S"), df$Global_reactive_power, type="l", xlab = "datetime", ylab="Global_reactive_power", col = "black")
png("plot4.png")
par(mfcol = c(2,2))
plot(strptime(df$Datetime, "%d/%m/%Y %H:%M:%S"), df$Global_active_power, type="l", xlab="Global active Power (Kilowatts)", col = "black")
plot(strptime(df$Datetime, "%d/%m/%Y %H:%M:%S"), df$Sub_metering_1, type="l", xlab="",ylab="Energy sub metering", col = "black")
lines(strptime(df$Datetime, "%d/%m/%Y %H:%M:%S"), df$Sub_metering_2, type="l", xlab="",ylab="Energy sub metering", col = "red")
lines(strptime(df$Datetime, "%d/%m/%Y %H:%M:%S"), df$Sub_metering_3, type="l", xlab="",ylab="Energy sub metering", col = "blue")
legend("topright",lty=1, col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(strptime(df$Datetime, "%d/%m/%Y %H:%M:%S"), df$Voltage, type="l", ylab="Voltage", col = "black")
plot(strptime(df$Datetime, "%d/%m/%Y %H:%M:%S"), df$Global_reactive_power, type="l", xlab = "datetime", ylab="Global_reactive_power", col = "black")
dev.off()
